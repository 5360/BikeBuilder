@{
    ViewData["Title"] = "Home Page";

}
<head>
    <meta charset="utf-8">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Unity WebGL Player | BikeBuilder</title>
    <link rel="shortcut icon" href="TemplateData/favicon.ico">
</head>
<div class="container-fluid">
    <div class="row">
        <div id="unity-container" class=" col">
            <canvas id="unity-canvas"></canvas>
            <div id="unity-loading-bar">
                <div id="unity-logo"></div>
                <div id="unity-progress-bar-empty">
                    <div id="unity-progress-bar-full"></div>
                </div>
            </div>
            <div id="unity-warning"> </div>
            <div id="unity-footer">
                <div id="unity-webgl-logo"></div>
                <div id="unity-fullscreen-button"></div>
                <div id="unity-build-title">BikeBuilder</div>
            </div>
        </div>
        <div class=" col">
            <ul class="nav nav-tabs mb-3" id="myTab0" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active"
                            id="frame-tab"
                            data-mdb-toggle="tab"
                            data-mdb-target="#frame"
                            type="button"
                            role="tab"
                            aria-controls="home"
                            aria-selected="true">
                        Frame
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link"
                            id="profile-tab0"
                            data-mdb-toggle="tab"
                            data-mdb-target="#wheels"
                            type="button"
                            role="tab"
                            aria-controls="profile"
                            aria-selected="false">
                        Wheels
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link"
                            id="contact-tab0"
                            data-mdb-toggle="tab"
                            data-mdb-target="#handlebar"
                            type="button"
                            role="tab"
                            aria-controls="contact"
                            aria-selected="false">
                        Handlebar
                    </button>
                </li>
            </ul>
            <div class="tab-content" id="myTabContent0">
                <div class="tab-pane fade show active"
                     id="frames"
                     role="tabpanel"
                     aria-labelledby="frame-tab">
                    <button data-name="frame_yellow" onclick="setFrame(this)"> Yellow</button>
                    <button data-name="frame_green" onclick="setFrame(this)"> Green</button>
                </div>
                <div class="tab-pane fade"
                     id="wheels" 
                     role="tabpanel" 
                     aria-labelledby="wheels-tab">
                    Tab 2 content
                </div>
                <div class="tab-pane fade" 
                id="handlebar" 
                role="tabpanel" 
                aria-labelledby="contact-tab0">
                    Tab 3 content
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    function setFrame(frame_id) {
        unityInstance.SendMessage("Bike", "SetFrame", frame_id);
    }

    function setWheels(wheel_id) {
        unityInstance.SendMessage("Bike", "SetWheels", wheels_id);
    }



    var container = document.querySelector("#unity-container");
    var canvas = document.querySelector("#unity-canvas");
    var loadingBar = document.querySelector("#unity-loading-bar");
    var progressBarFull = document.querySelector("#unity-progress-bar-full");
    var fullscreenButton = document.querySelector("#unity-fullscreen-button");
    var warningBanner = document.querySelector("#unity-warning");



    // Shows a temporary message banner/ribbon for a few seconds, or
    // a permanent error message on top of the canvas if type=='error'.
    // If type=='warning', a yellow highlight color is used.
    // Modify or remove this function to customize the visually presented
    // way that non-critical warnings and error messages are presented to the
    // user.
    function unityShowBanner(msg, type) {
        function updateBannerVisibility() {
            warningBanner.style.display = warningBanner.children.length ? 'block' : 'none';
        }
        var div = document.createElement('div');
        div.innerHTML = msg;
        warningBanner.appendChild(div);
        if (type == 'error') div.style = 'background: red; padding: 10px;';
        else {
            if (type == 'warning') div.style = 'background: yellow; padding: 10px;';
            setTimeout(function() {
                warningBanner.removeChild(div);
                updateBannerVisibility();
            }, 5000);
        }
        updateBannerVisibility();
    }

    var buildUrl = "Build";
    var loaderUrl = buildUrl + "/Build.loader.js";
    var config = {
        dataUrl: buildUrl + "/Build.data.unityweb",
        frameworkUrl: buildUrl + "/Build.framework.js.unityweb",
        codeUrl: buildUrl + "/Build.wasm.unityweb",
        streamingAssetsUrl: "StreamingAssets",
        companyName: "DefaultCompany",
        productName: "BikeBuilder",
        productVersion: "0.1",
        showBanner: unityShowBanner,
    };

    // By default Unity keeps WebGL canvas render target size matched with
    // the DOM size of the canvas element (scaled by window.devicePixelRatio)
    // Set this to false if you want to decouple this synchronization from
    // happening inside the engine, and you would instead like to size up
    // the canvas DOM size and WebGL render target sizes yourself.
    // config.matchWebGLToCanvasSize = false;

    if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
        // Mobile device style: fill the whole browser client area with the game canvas:

        var meta = document.createElement('meta');
        meta.name = 'viewport';
        meta.content = 'width=device-width, height=device-height, initial-scale=1.0, user-scalable=no, shrink-to-fit=yes';
        document.getElementsByTagName('head')[0].appendChild(meta);
        container.className = "unity-mobile";

        // To lower canvas resolution on mobile devices to gain some
        // performance, uncomment the following line:
        // config.devicePixelRatio = 1;

        canvas.style.width = window.innerWidth + 'px';
        canvas.style.height = window.innerHeight + 'px';

        unityShowBanner('WebGL builds are not supported on mobile devices.');
    } else {
        // Desktop style: Render the game canvas in a window that can be maximized to fullscreen:

        canvas.style.width = "960px";
        canvas.style.height = "600px";
    }

    loadingBar.style.display = "block";

    var bikeBuilderInstance = null;

    var script = document.createElement("script");
    script.src = loaderUrl;
    script.onload = () => {
        createUnityInstance(canvas, config, (progress) => {
            progressBarFull.style.width = 100 * progress + "%";
        }).then((unityInstance) => {
            loadingBar.style.display = "none";
            fullscreenButton.onclick = () => {
                unityInstance.SetFullscreen(1);
            };
            bikeBuilderInstance = unityInstance;
        }).catch((message) => {
            alert(message);
        });
    };
    document.body.appendChild(script);

    function setFrame(btn) {
        var name = btn.getAttribute('data-name');
        bikeBuilderInstance.SendMessage("Bike", "SetFrame", name);
    }
</script>